@property --highlight-x {
  syntax: '<percentage>';
  inherits: false;
  initial-value: 0%;
}
@property --highlight-y {
  syntax: '<percentage>';
  inherits: false;
  initial-value: 0%;
}

:host {
  --background-color-radial-silver:
    #dedede, #ededed 16%, #dedede 21%, #d1d1d1 24%, #9d9d9d 27%, #dedede 36%, #9d9d9d 45%, #ededed 60%, #dedede 72%,
    #ededed 80%, #dedede 84%, #a1a1a1;

  --background-color-radial-gold:
    #ffdea1, #f6f9bb 24%, #bda472 27%, #ffdea1 36%, #f6f9bb 45%, #f6f9bb 60%, #ffdea1 72%, #f6f9bb 80%, #ffdea1 84%,
    #bda472;

  --background-color-radial-bronze: #d97037, #db9067 27%, #d58c5f 50%, #e9ae8f 72%, #d58c5f 80%, #e45821;

  --background-color-radial-class: var(--background-color-radial-gold);
}

@mixin dndClassBackground($className, $spriteId, $colorBase, $colorShadow) {
  --dnd-class-background-mask:
    url('/img/ornament-sprite.svg#corner-#{$spriteId}-lt') left top / 33% auto no-repeat,
    url('/img/ornament-sprite.svg#corner-#{$spriteId}-rt') right top / 33% auto no-repeat,
    url('/img/ornament-sprite.svg#corner-#{$spriteId}-rb') right bottom / 33% auto no-repeat,
    url('/img/ornament-sprite.svg#corner-#{$spriteId}-lb') left bottom / 33% auto no-repeat,
    url('/img/ornament-sprite.svg#deco-#{$spriteId}-l') left center / 66% auto no-repeat,
    url('/img/ornament-sprite.svg#deco-#{$spriteId}-r') right center / 66% auto no-repeat,
    url('/img/class-#{$className}.svg') center center / 33% auto no-repeat;
  --dnd-class-background-color-base: #{$colorBase};
  --dnd-class-background-color-shadow: #{$colorShadow};
}

:host(.class-artificer) {
  .card-container {
    @include dndClassBackground('artificer', 3, rgb(0, 196, 167), rgb(9, 94, 147));
  }
}

:host(.class-barbarian) {
  .card-container {
    @include dndClassBackground('barbarian', 1, rgb(147, 51, 51), rgb(122, 40, 40));
    --background-color-radial-class: var(--background-color-radial-bronze);
  }
}

:host(.class-bard) {
  .card-container {
    @include dndClassBackground('bard', 2, rgb(196, 46, 0), rgb(137, 48, 0));
  }
}

:host(.class-cleric) {
  .card-container {
    @include dndClassBackground('cleric', 4, rgb(255, 213, 0), rgb(188, 163, 39));
    --background-color-radial-class: #43aeff 0, #0770c1 100%;
  }
}

:host(.class-druid) {
  .card-container {
    @include dndClassBackground('druid', 2, rgb(18, 148, 89), rgb(9, 104, 61));
  }
}

:host(.class-fighter) {
  .card-container {
    @include dndClassBackground('fighter', 4, rgb(255, 0, 0), rgb(138, 14, 14));
    --background-color-radial-class: #ffcc00 0, #d9ad00 100%;
  }
}

:host(.class-monk) {
  .card-container {
    @include dndClassBackground('monk', 4, rgb(255, 127, 244), rgb(196, 77, 186));
  }
}

:host(.class-paladin) {
  .card-container {
    @include dndClassBackground('paladin', 2, rgb(0, 65, 129), rgb(9, 55, 101));
    --background-color-radial-class: --background-color-radial-silver;
  }
}

:host(.class-ranger) {
  .card-container {
    @include dndClassBackground('ranger', 2, rgb(0, 80, 13), rgb(4, 51, 12));
  }
}

:host(.class-rogue) {
  .card-container {
    @include dndClassBackground('rogue', 2, rgb(0, 0, 0), rgb(51, 52, 60));
  }
}

:host(.class-sorcerer) {
  .card-container {
    @include dndClassBackground('sorcerer', 2, rgb(56, 6, 6), rgb(51, 52, 60));
  }
}

:host(.class-warlock) {
  .card-container {
    @include dndClassBackground('warlock', 2, rgb(103, 2, 76), rgb(66, 5, 50));
  }
}

:host(.class-wizard) {
  .card-container {
    @include dndClassBackground('wizard', 2, rgb(5, 57, 180), rgb(13, 44, 114));
  }
}

.card-container {
  transition:
    --highlight-x 1s ease,
    --highlight-y 1s ease;
  --highlight-x: calc(50% + (50% * var(--tiltY) * -1));
  --highlight-y: calc(50% + (50% * var(--tiltX) * -1));
  --card-background-gradient-angle: 0;
  --background-color-radial-ornament: radial-gradient(
    circle at var(--highlight-x, 50%) var(--highlight-y, 50%),
    var(--background-color-radial-class)
  );
  --transition-timing: 2s;
  --perspective: 1000px;
  --rotationX: 0;
  --rotationY: 0;
  --rotationZ: 0;

  --tiltX: 0;
  --tiltY: 0;
  --angle: 7deg;

  --flipped: 0;

  position: relative;

  aspect-ratio: 0.7;
}

.card-container:active {
  .content {
    --flipped: 1;
  }
}

.mouse-position-tracker {
  position: absolute;
  inset: 0;
  display: grid;

  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr;

  & > div {
    z-index: 2;
  }
}

.card-container:has(.mouse-position-tracker > div:nth-child(1):hover) {
  --tiltX: 1;
  --tiltY: 1;
}

.card-container:has(.mouse-position-tracker > div:nth-child(2):hover) {
  --tiltX: 1;
}

.card-container:has(.mouse-position-tracker > div:nth-child(3):hover) {
  --tiltX: 1;
  --tiltY: -1;
}

.card-container:has(.mouse-position-tracker > div:nth-child(4):hover) {
  --tiltY: 1;
}

.card-container:has(.mouse-position-tracker > div:nth-child(6):hover) {
  --tiltY: -1;
}

.card-container:has(.mouse-position-tracker > div:nth-child(7):hover) {
  --tiltX: -1;
  --tiltY: 1;
}

.card-container:has(.mouse-position-tracker > div:nth-child(8):hover) {
  --tiltX: -1;
}

.card-container:has(.mouse-position-tracker > div:nth-child(9):hover) {
  --tiltX: -1;
  --tiltY: -1;
}

.content {
  --highlight-x: calc(50% + (50% * var(--tiltY) * -1));
  --highlight-y: calc(50% + (50% * var(--tiltX) * -1));

  position: absolute;
  inset: 0;

  border-radius: 0.5rem;

  box-shadow:
    0 2.8px 2.2px rgba(0, 0, 0, 0.034),
    0 6.7px 5.3px rgba(0, 0, 0, 0.048),
    0 12.5px 10px rgba(0, 0, 0, 0.06),
    0 22.3px 17.9px rgba(0, 0, 0, 0.072),
    0 41.8px 33.4px rgba(0, 0, 0, 0.086),
    0 100px 80px rgba(0, 0, 0, 0.12);

  background:
    url('/img/paper-background.png'),
    radial-gradient(
      circle at var(--highlight-x, 50%) var(--highlight-y, 50%),
      var(--dnd-class-background-color-base) 50%,
      var(--dnd-class-background-color-shadow) 100%
    );
  background-blend-mode: multiply;

  transition:
    --highlight-x 1s ease,
    --highlight-y 1s ease,
    transform 500ms ease;
  transform-style: preserve-3d;
  transform: perspective(var(--perspective)) rotateX(calc(var(--angle) * var(--tiltX)))
    rotateY(calc((180deg * var(--flipped)) - (var(--angle) * var(--tiltY)))) rotateZ(var(--rotationZ));
}

.back {
  position: relative;
  display: block;
  margin: 0 auto;
  transition: background-color 300ms linear;
  background-color: var(--card-background-color);
  backface-visibility: hidden;

  &::after {
    content: '';
    display: block;
    position: absolute;
    inset: 0.5rem;
    mask: var(--dnd-class-background-mask);

    mask-repeat: no-repeat;
    background: var(--background-color-radial-ornament);
  }
}

.front,
.back {
  position: absolute;
  inset: 0;
  backface-visibility: hidden;
}

.front {
  transform: rotateY(180deg);
}
