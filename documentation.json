{
  "pipes": [],
  "interfaces": [],
  "injectables": [],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "SpellCardComponent",
      "id": "component-SpellCardComponent-05ecbbd84de91bd795f823e8bbb4ec9dabb4a2a71222b0cff5cbfd6d433a95ad907d9950ced4c0d60b72f8cb6b8f8d8cc5fa447c8be2dab94a2b46a722bf9c5b",
      "file": "libs/client/ui/src/lib/spell-card/spell-card.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "SafeHtmlPipe",
          "type": "pipe"
        }
      ],
      "selector": "lib-ui-spell-card",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./spell-card.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "spell",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 17,
          "required": true
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "description",
          "defaultValue": "computed(() => {\n    return this.safeHtml.transform(this.spell()?.description as string);\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "level",
          "defaultValue": "computed(() => {\n    return Number(this.spell().level) > 0 ? this.spell().level + '. Level' : 'Cantrip';\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "safeHtml",
          "defaultValue": "inject(SafeHtmlPipe)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [123]
        },
        {
          "name": "school",
          "defaultValue": "computed(() => {\n    return this.spell().school.name;\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "spell",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 17,
          "required": true
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, computed, inject, input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SafeHtmlPipe } from '@dnd-cards/client-utils';\nimport { ISpellModel } from '@interfaces';\n\n@Component({\n  selector: 'lib-ui-spell-card',\n  standalone: true,\n  imports: [CommonModule],\n  providers: [SafeHtmlPipe],\n  templateUrl: './spell-card.component.html',\n  styleUrl: './spell-card.component.scss',\n})\nexport class SpellCardComponent {\n  private safeHtml = inject(SafeHtmlPipe);\n\n  spell = input.required<ISpellModel>();\n  description = computed(() => {\n    return this.safeHtml.transform(this.spell()?.description as string);\n  });\n  level = computed(() => {\n    return Number(this.spell().level) > 0 ? this.spell().level + '. Level' : 'Cantrip';\n  });\n  school = computed(() => {\n    return this.spell().school.name;\n  });\n}\n",
      "styleUrl": "./spell-card.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<article class=\"spell-container shadow d-flex flex-column\">\n  <header class=\"text-truncate\" [ngClass]=\"{ 'spell-concentration': spell().concentration }\">\n    <h3 class=\"text-truncate\">{{ spell().name }}</h3>\n  </header>\n  <div class=\"spell-details-list\">\n    <div class=\"spell-detail spell-casting-time\">\n      <h5>Casting Time</h5>\n      <p>{{ spell().castingTime }}</p>\n    </div>\n    <div class=\"spell-detail spell-range\">\n      <h5>Range</h5>\n      <p>{{ spell().range }}</p>\n    </div>\n    <div class=\"spell-detail spell-components\">\n      <h5>Components</h5>\n      <p>{{ spell().components }}</p>\n    </div>\n    <div class=\"spell-detail spell-duration\">\n      <h5>Duration</h5>\n      <p>{{ spell().duration }}</p>\n    </div>\n  </div>\n  <div class=\"spell-description\">\n    <span [innerHTML]=\"description()\"></span>\n    <strong *ngIf=\"spell().material\">Materials: </strong><br />\n    <strong>{{ spell().material }}</strong>\n  </div>\n  <footer>\n    <div class=\"spell-class\">Class</div>\n    <div class=\"spell-school\">{{ level() }} {{ school() }}</div>\n  </footer>\n</article>\n"
    },
    {
      "name": "TopNavComponent",
      "id": "component-TopNavComponent-0707bdba2d077c72b25a299ecaa970004dd25f153dd3d0b77fc2c0fdf113c96149bd03cf4da0fd52459615bc8cad5ff135011e3721d74df28ad2f72f51bbe41b",
      "file": "libs/client/ui/src/lib/top-nav/top-nav.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "lib-ui-top-nav",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./top-nav.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "breakpointObserver",
          "defaultValue": "inject(BreakpointObserver)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [123]
        },
        {
          "name": "isHandset$",
          "defaultValue": "this.breakpointObserver.observe(Breakpoints.Handset).pipe(\n    debounceTime(50),\n    map(result => result.matches),\n    shareReplay(),\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean>",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 22
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatToolbarModule",
          "type": "module"
        },
        {
          "name": "MatButtonModule",
          "type": "module"
        },
        {
          "name": "MatSidenavModule",
          "type": "module"
        },
        {
          "name": "MatListModule",
          "type": "module"
        },
        {
          "name": "MatIconModule",
          "type": "module"
        },
        {
          "name": "AsyncPipe",
          "type": "pipe"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, inject } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { AsyncPipe } from '@angular/common';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Observable } from 'rxjs';\nimport { debounceTime, map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'lib-ui-top-nav',\n  templateUrl: './top-nav.component.html',\n  styleUrl: './top-nav.component.css',\n  standalone: true,\n  imports: [MatToolbarModule, MatButtonModule, MatSidenavModule, MatListModule, MatIconModule, AsyncPipe],\n})\nexport class TopNavComponent {\n  private breakpointObserver = inject(BreakpointObserver);\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset).pipe(\n    debounceTime(50),\n    map(result => result.matches),\n    shareReplay(),\n  );\n}\n",
      "styleUrl": "./top-nav.component.css",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav\n    #drawer\n    class=\"sidenav\"\n    [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n    [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n    [opened]=\"(isHandset$ | async) === false\"\n  >\n    <mat-toolbar>Menu</mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item href=\"/spell\">Spells</a>\n      <a mat-list-item href=\"#\">Link 2</a>\n      <a mat-list-item href=\"#\">Link 3</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      @if (isHandset$ | async) {\n        <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"drawer.toggle()\">\n          <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n        </button>\n      }\n      <span>D&D Cards</span>\n    </mat-toolbar>\n    <ng-content></ng-content>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
    }
  ],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "config",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/client/ui/.storybook/main.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StorybookConfig",
        "defaultValue": "{\n  stories: ['../**/*.@(mdx|stories.@(js|jsx|ts|tsx))'],\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions'],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n}"
      },
      {
        "name": "Heading",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/top-nav works!/gi)).toBeTruthy();\n  },\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<TopNavComponent>",
        "defaultValue": "{\n  component: TopNavComponent,\n  title: 'TopNavComponent',\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/client/ui/src/lib/spell-card/spell-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<SpellCardComponent>",
        "defaultValue": "{ component: SpellCardComponent, title: 'SpellCardComponent' }"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {},\n}"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/client/ui/src/lib/spell-card/spell-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{ args: {} }"
      }
    ],
    "functions": [],
    "typealiases": [
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<TopNavComponent>",
        "file": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<SpellCardComponent>",
        "file": "libs/client/ui/src/lib/spell-card/spell-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      }
    ],
    "enumerations": [],
    "groupedVariables": {
      "libs/client/ui/.storybook/main.ts": [
        {
          "name": "config",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/client/ui/.storybook/main.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StorybookConfig",
          "defaultValue": "{\n  stories: ['../**/*.@(mdx|stories.@(js|jsx|ts|tsx))'],\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions'],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n}"
        }
      ],
      "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts": [
        {
          "name": "Heading",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/top-nav works!/gi)).toBeTruthy();\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<TopNavComponent>",
          "defaultValue": "{\n  component: TopNavComponent,\n  title: 'TopNavComponent',\n}"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {},\n}"
        }
      ],
      "libs/client/ui/src/lib/spell-card/spell-card.component.stories.ts": [
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/client/ui/src/lib/spell-card/spell-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<SpellCardComponent>",
          "defaultValue": "{ component: SpellCardComponent, title: 'SpellCardComponent' }"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/client/ui/src/lib/spell-card/spell-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{ args: {} }"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {
      "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<TopNavComponent>",
          "file": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "libs/client/ui/src/lib/spell-card/spell-card.component.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<SpellCardComponent>",
          "file": "libs/client/ui/src/lib/spell-card/spell-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 0,
    "status": "low",
    "files": [
      {
        "filePath": "libs/client/ui/.storybook/main.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "config",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/client/ui/src/lib/spell-card/spell-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/client/ui/src/lib/spell-card/spell-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/client/ui/src/lib/spell-card/spell-card.component.stories.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "Story",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/client/ui/src/lib/spell-card/spell-card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SpellCardComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Heading",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/client/ui/src/lib/top-nav/top-nav.component.stories.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "Story",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/client/ui/src/lib/top-nav/top-nav.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TopNavComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      }
    ]
  }
}
